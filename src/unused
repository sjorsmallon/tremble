
using namespace std::literals;
struct vec3f_t
{
    union {
        struct {
            float x,y,z;
        };
        struct {
            float a,b,c;
        };
        struct {
        float u,v,w;
        };
        float arr[3];
      };
};

struct Position
{
    float x;
    float y;
    float z;
};

// where are they looking?
struct Orientation
{
    vec3f_t forward;
    vec3f_t right;
};

// where are they heading?
struct Velocity
{
    vec3f_t v;
};

static_assert(sizeof(Position) == sizeof(vec3f_t));

// to be synced over the network. this could just be a bag of entities
// but I want to keep players separate for now so I can think about it.
struct GameState
{
    std::vector<Entity> players;
    std::vector<Entity> everything_else;
};

static GameState g_game_state{};

// already this is not good because of the registry thing. we should pass registry in here.
static Entity create_player()
{   
    auto& registry = get_registry();
    auto entity = registry.CreateEntity();
    entity.AddComponent<Position>(10.0f, 10.0f, 0.0f);
    entity.AddComponent<Orientation>(vec3f_t{1.0f, 0.0f, 0.0f},vec3f_t{0.0f, 0.0f, 1.0f});
    entity.AddComponent<Velocity>();

    g_game_state.players.push_back(entity);
    return entity;
}

static bool connect_to_server()
{
    return false;
}





    auto default_triangle_vertices = create_default_triangle();
    auto default_triangle_buffer = create_interleaved_xnc_buffer(default_triangle_vertices);

    const char* base_vertex_shader_src = R"(
               #version 330 core
        layout(location = 0) in vec3 aPos;     // Vertex position
        layout(location = 1) in vec3 aNormal;  // Vertex normal (not used in this simple shader)
        layout(location = 2) in vec4 aColor;    // Vertex color

        out vec4 FragColor; // Output color to fragment shader

        void main() {
            gl_Position = vec4(aPos, 1.0); // Transform to clip space
            FragColor = aColor;             // Pass color to fragment shader
        })";

    const char* base_fragment_shader_src = R"(
        #version 330 core
        in vec4 FragColor; // Input color from vertex shader
        out vec4 finalColor; // Final color output

        void main() {
            finalColor = FragColor; // Set the output color
    })";

    auto base_shader_program = create_shader_program(
        base_vertex_shader_src,
        base_fragment_shader_src
        );


// random glsl snippets.
randomize_color_for_each_face
{
    
  float random_from_seed(int seed)
   {
        // A simple hash function using bitwise operations and multiplication
        seed = (seed ^ 61) ^ (seed >> 16);   
        seed = seed + (seed << 3);           
        seed = seed ^ (seed >> 4);           
        seed = seed * 0x27d4eb2d;            
        seed = seed ^ (seed >> 15);          

        return float(seed & 0xFFFFFF) / 0xFFFFFF; // Normalize to [0, 1]
    }

    // Function to get a random color based on an integer seed
    vec3 random_color_from_seed(int seed) {
        float r = random_from_seed(seed);     // Random red component
        float g = random_from_seed(seed + 1); // Random green component
        float b = random_from_seed(seed + 2); // Random blue component

        return vec3(r, g, b);                  // Return the RGB color as a vec3
    }

    // awful trick to perform integer division to get vertices to agree on a color.
    int face_id = gl_VertexID / 3;
    color_frag_in = vec4(random_color_from_seed(face_id), 1.0f);
}




// Process events
while (SDL_PollEvent(&event))
{
    //Note: this is _not good enough_ to deal with repeated keystrokes. we need to poll the keyboard state every frame. 
    // if (event.type == SDL_EVENT_KEY_DOWN)
    // {
    //     auto key = to_key(event);
    //     handle_keyboard_input(key);

    //     // temporary debug stuff.
    //     if (key == Key::KEY_P)
    //     {
    //         std::print("{}",camera.position);
    //     }
    // }

    // if (event.type == SDL_EVENT_QUIT)
    // {
    //     running = false;
    // }

    // if (event.type == SDL_EVENT_MOUSE_MOTION)
    // {
    //     // auto& mouse_move = event.motion;
    //     // float dx = mouse_move.xrel;
    //     // float dy = mouse_move.yrel;
    //     // 
    // }
    // Additional event handling can go here (e.g., input, window events)
}



auto arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 10.0f}, {100.0f, 0.0f, 10.0f}, 10.0f);
auto arrow_gl_buffer = create_interleaved_xnc_buffer(arrow_vertices);


// just the one arrow 
// draw_vertex_xnc_buffer(arrow_gl_buffer.VAO, arrow_gl_buffer.VBO, arrow_gl_buffer.vertex_count, xnc_shader_program,
//     glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
//     get_look_at_view_matrix(camera),
//     glm::mat4(1.0f)
//     );



auto x_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 0.0f}, {1.0f, 0.0f, 0.0f}, 0.15f);
auto x_arrow_gl_buffer = create_interleaved_xnc_buffer(x_arrow_vertices);

auto y_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.f, 0.0f}, {0.0f, 1.0f, 0.0f}, 0.15f);
auto y_arrow_gl_buffer = create_interleaved_xnc_buffer(y_arrow_vertices);

auto z_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 1.0f}, 0.15f);
auto z_arrow_gl_buffer = create_interleaved_xnc_buffer(z_arrow_vertices);


static void draw_gimble(Camera& camera, GL_Buffer x_arrow_gl_buffer, GL_Buffer y_arrow_gl_buffer, GL_Buffer z_arrow_gl_buffer;
{
        // the three arrows.
        // think about glm::ortho.
        // stop guessing.
        glDisable(GL_DEPTH_TEST);


        // think about it differently.
        // projection is the same.
        // the view is ok.
        // the main thing is this: we need to translate it to the center of NDC. how do we do that?
        // the translation is the translation in world space. I am confusing myself.
        glm::mat4 projection = glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z);
        glm::mat4 view = get_look_at_view_matrix(camera);
        auto right = normalize(cross(camera.front, camera.up));
        glm::mat4 translation = glm::translate(glm::mat4(1.0f), camera.position + 2.0f * normalize(camera.front) + 1.0f * normalize(right));


        draw_vertex_xnc_buffer(x_arrow_gl_buffer.VAO, x_arrow_gl_buffer.VBO, x_arrow_gl_buffer.vertex_count, xnc_shader_program,
            projection,
            view,
            translation
        );
        
        draw_vertex_xnc_buffer(y_arrow_gl_buffer.VAO, y_arrow_gl_buffer.VBO, y_arrow_gl_buffer.vertex_count, xnc_shader_program,
        projection,
        view,
        translation
        );
        
        draw_vertex_xnc_buffer(z_arrow_gl_buffer.VAO, z_arrow_gl_buffer.VBO, z_arrow_gl_buffer.vertex_count, xnc_shader_program,
        projection,
        view,
        translation
        );
        glEnable(GL_DEPTH_TEST);
}



// color the closest face white
// if (closest_face_idx != -1)
// {  
//     std::print("closest face found.\n");
//     glBindVertexArray(mini_aabbs_gl_buffer.VAO); 
//     glBindBuffer(GL_ARRAY_BUFFER, mini_aabbs_gl_buffer.VBO);

//     GLsizeiptr offset = closest_face_idx * sizeof(vertex_xnc);
//     vertex_xnc new_vertex = mini_aabbs_vertices[closest_face_idx];
//     new_vertex.color =vec4{1.0f,1.0f,1.0f, 1.0f}; 
//     GLsizeiptr size = sizeof(vertex_xnc); // Size of the new data
//     glBufferSubData(GL_ARRAY_BUFFER, offset, size, (void*)&new_vertex);

//     // Unbind the buffer and VAO (optional, but good practice)
//     glBindBuffer(GL_ARRAY_BUFFER, 0);
//     glBindVertexArray(0);

}



    // set of AABBs. to test BSP generation with.
    int aabb_count = 500;
    vec3 extents{25.0f, 25.0f, 25.0f}; // Full extents (width, height, depth)
    AABB bounds{.min = vec3{-1000.0f, -1000.0f, -1000.0f}, .max = {1000.0f, 1000.0f, 1000.0f}}; // World space bounds
    auto mini_aabbs = generate_non_overlapping_aabbs(aabb_count, extents, bounds);
    auto mini_aabbs_vertices = to_vertex_xnc(mini_aabbs);
    auto mini_aabbs_gl_buffer = create_interleaved_xnc_buffer(mini_aabbs_vertices);

    auto vertex_count = mini_aabbs_vertices.size();
    BSP* bsp = nullptr;
    {
        std::vector<uint64_t> face_indices{};
        int face_idx = 0;
        while (face_idx < vertex_count)
        {
            face_indices.push_back(face_idx);
            face_idx += 3;
        }

        bsp = build_bsp(face_indices, mini_aabbs_vertices);
    }
  



    // grid related.
    float grid_size    = 1000.0f;
    float grid_spacing = 10.0f;
    // to be interpreted as (start, end).
    auto grid_vertices  = generate_grid_lines_from_plane(vec3{0.0f,0.0f,0.0f}, vec3{0.0f, 1.0f, 0.0f}, grid_size, grid_spacing);
    auto grid_gl_buffer =  create_x_buffer(grid_vertices);