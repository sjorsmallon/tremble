    
using namespace std::literals;
struct vec3f_t
{
    union {
        struct {
            float x,y,z;
        };
        struct {
            float a,b,c;
        };
        struct {
        float u,v,w;
        };
        float arr[3];
      };
};

struct Position
{
    float x;
    float y;
    float z;
};

// where are they looking?
struct Orientation
{
    vec3f_t forward;
    vec3f_t right;
};

// where are they heading?
struct Velocity
{
    vec3f_t v;
};

static_assert(sizeof(Position) == sizeof(vec3f_t));

// to be synced over the network. this could just be a bag of entities
// but I want to keep players separate for now so I can think about it.
struct GameState
{
    std::vector<Entity> players;
    std::vector<Entity> everything_else;
};

static GameState g_game_state{};

// already this is not good because of the registry thing. we should pass registry in here.
static Entity create_player()
{   
    auto& registry = get_registry();
    auto entity = registry.CreateEntity();
    entity.AddComponent<Position>(10.0f, 10.0f, 0.0f);
    entity.AddComponent<Orientation>(vec3f_t{1.0f, 0.0f, 0.0f},vec3f_t{0.0f, 0.0f, 1.0f});
    entity.AddComponent<Velocity>();

    g_game_state.players.push_back(entity);
    return entity;
}

static bool connect_to_server()
{
    return false;
}





    auto default_triangle_vertices = create_default_triangle();
    auto default_triangle_buffer = create_interleaved_xnc_buffer(default_triangle_vertices);

    const char* base_vertex_shader_src = R"(
               #version 330 core
        layout(location = 0) in vec3 aPos;     // Vertex position
        layout(location = 1) in vec3 aNormal;  // Vertex normal (not used in this simple shader)
        layout(location = 2) in vec4 aColor;    // Vertex color

        out vec4 FragColor; // Output color to fragment shader

        void main() {
            gl_Position = vec4(aPos, 1.0); // Transform to clip space
            FragColor = aColor;             // Pass color to fragment shader
        })";

    const char* base_fragment_shader_src = R"(
        #version 330 core
        in vec4 FragColor; // Input color from vertex shader
        out vec4 finalColor; // Final color output

        void main() {
            finalColor = FragColor; // Set the output color
    })";

    auto base_shader_program = create_shader_program(
        base_vertex_shader_src,
        base_fragment_shader_src
        );


// random glsl snippets.
randomize_color_for_each_face
{
    
  float random_from_seed(int seed)
   {
        // A simple hash function using bitwise operations and multiplication
        seed = (seed ^ 61) ^ (seed >> 16);   
        seed = seed + (seed << 3);           
        seed = seed ^ (seed >> 4);           
        seed = seed * 0x27d4eb2d;            
        seed = seed ^ (seed >> 15);          

        return float(seed & 0xFFFFFF) / 0xFFFFFF; // Normalize to [0, 1]
    }

    // Function to get a random color based on an integer seed
    vec3 random_color_from_seed(int seed) {
        float r = random_from_seed(seed);     // Random red component
        float g = random_from_seed(seed + 1); // Random green component
        float b = random_from_seed(seed + 2); // Random blue component

        return vec3(r, g, b);                  // Return the RGB color as a vec3
    }

    // awful trick to perform integer division to get vertices to agree on a color.
    int face_id = gl_VertexID / 3;
    color_frag_in = vec4(random_color_from_seed(face_id), 1.0f);
}




// Process events
while (SDL_PollEvent(&event))
{
    //Note: this is _not good enough_ to deal with repeated keystrokes. we need to poll the keyboard state every frame. 
    // if (event.type == SDL_EVENT_KEY_DOWN)
    // {
    //     auto key = to_key(event);
    //     handle_keyboard_input(key);

    //     // temporary debug stuff.
    //     if (key == Key::KEY_P)
    //     {
    //         std::print("{}",camera.position);
    //     }
    // }

    // if (event.type == SDL_EVENT_QUIT)
    // {
    //     running = false;
    // }

    // if (event.type == SDL_EVENT_MOUSE_MOTION)
    // {
    //     // auto& mouse_move = event.motion;
    //     // float dx = mouse_move.xrel;
    //     // float dy = mouse_move.yrel;
    //     // 
    // }
    // Additional event handling can go here (e.g., input, window events)
}



auto arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 10.0f}, {100.0f, 0.0f, 10.0f}, 10.0f);
auto arrow_gl_buffer = create_interleaved_xnc_buffer(arrow_vertices);


// just the one arrow 
// draw_vertex_xnc_buffer(arrow_gl_buffer.VAO, arrow_gl_buffer.VBO, arrow_gl_buffer.vertex_count, xnc_shader_program,
//     glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
//     get_look_at_view_matrix(camera),
//     glm::mat4(1.0f)
//     );



auto x_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 0.0f}, {1.0f, 0.0f, 0.0f}, 0.15f);
auto x_arrow_gl_buffer = create_interleaved_xnc_buffer(x_arrow_vertices);

auto y_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.f, 0.0f}, {0.0f, 1.0f, 0.0f}, 0.15f);
auto y_arrow_gl_buffer = create_interleaved_xnc_buffer(y_arrow_vertices);

auto z_arrow_vertices = generate_arrow_vertices(vec3{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 1.0f}, 0.15f);
auto z_arrow_gl_buffer = create_interleaved_xnc_buffer(z_arrow_vertices);


static void draw_gimble(Camera& camera, GL_Buffer x_arrow_gl_buffer, GL_Buffer y_arrow_gl_buffer, GL_Buffer z_arrow_gl_buffer;
{
        // the three arrows.
        // think about glm::ortho.
        // stop guessing.
        glDisable(GL_DEPTH_TEST);


        // think about it differently.
        // projection is the same.
        // the view is ok.
        // the main thing is this: we need to translate it to the center of NDC. how do we do that?
        // the translation is the translation in world space. I am confusing myself.
        glm::mat4 projection = glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z);
        glm::mat4 view = get_look_at_view_matrix(camera);
        auto right = normalize(cross(camera.front, camera.up));
        glm::mat4 translation = glm::translate(glm::mat4(1.0f), camera.position + 2.0f * normalize(camera.front) + 1.0f * normalize(right));


        draw_vertex_xnc_buffer(x_arrow_gl_buffer.VAO, x_arrow_gl_buffer.VBO, x_arrow_gl_buffer.vertex_count, xnc_shader_program,
            projection,
            view,
            translation
        );
        
        draw_vertex_xnc_buffer(y_arrow_gl_buffer.VAO, y_arrow_gl_buffer.VBO, y_arrow_gl_buffer.vertex_count, xnc_shader_program,
        projection,
        view,
        translation
        );
        
        draw_vertex_xnc_buffer(z_arrow_gl_buffer.VAO, z_arrow_gl_buffer.VBO, z_arrow_gl_buffer.vertex_count, xnc_shader_program,
        projection,
        view,
        translation
        );
        glEnable(GL_DEPTH_TEST);
}



// color the closest face white
// if (closest_face_idx != -1)
// {  
//     std::print("closest face found.\n");
//     glBindVertexArray(mini_aabbs_gl_buffer.VAO); 
//     glBindBuffer(GL_ARRAY_BUFFER, mini_aabbs_gl_buffer.VBO);

//     GLsizeiptr offset = closest_face_idx * sizeof(vertex_xnc);
//     vertex_xnc new_vertex = mini_aabbs_vertices[closest_face_idx];
//     new_vertex.color =vec4{1.0f,1.0f,1.0f, 1.0f}; 
//     GLsizeiptr size = sizeof(vertex_xnc); // Size of the new data
//     glBufferSubData(GL_ARRAY_BUFFER, offset, size, (void*)&new_vertex);

//     // Unbind the buffer and VAO (optional, but good practice)
//     glBindBuffer(GL_ARRAY_BUFFER, 0);
//     glBindVertexArray(0);

}



    // set of AABBs. to test BSP generation with.
    int aabb_count = 500;
    vec3 extents{25.0f, 25.0f, 25.0f}; // Full extents (width, height, depth)
    AABB bounds{.min = vec3{-1000.0f, -1000.0f, -1000.0f}, .max = {1000.0f, 1000.0f, 1000.0f}}; // World space bounds
    auto mini_aabbs = generate_non_overlapping_aabbs(aabb_count, extents, bounds);
    auto mini_aabbs_vertices = to_vertex_xnc(mini_aabbs);
    auto mini_aabbs_gl_buffer = create_interleaved_xnc_buffer(mini_aabbs_vertices);

    auto vertex_count = mini_aabbs_vertices.size();
    BSP* bsp = nullptr;
    {
        std::vector<uint64_t> face_indices{};
        int face_idx = 0;
        while (face_idx < vertex_count)
        {
            face_indices.push_back(face_idx);
            face_idx += 3;
        }

        bsp = build_bsp(face_indices, mini_aabbs_vertices);
    }
  
    // grid related.
    float grid_size    = 1000.0f;
    float grid_spacing = 10.0f;
    // to be interpreted as (start, end).
    auto grid_vertices  = generate_grid_lines_from_plane(vec3{0.0f,0.0f,0.0f}, vec3{0.0f, 1.0f, 0.0f}, grid_size, grid_spacing);
    auto grid_gl_buffer =  create_x_buffer(grid_vertices);

// vertex grid.
// draw_lines(grid_gl_buffer.VAO, grid_gl_buffer.VBO, grid_gl_buffer.vertex_count, x_shader_program,
//     glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
//     get_look_at_view_matrix(camera)
//     );

        // uv grid
        draw_triangles(uv_grid_gl_buffer.VAO, uv_grid_gl_buffer.VBO, uv_grid_gl_buffer.vertex_count, uv_grid_shader_program,
            glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
            get_look_at_view_matrix(camera),
            glm::mat4(1.0f)
            );




// this is to abstract from SDL keypresses but it is kind of ugly actually (the pavel trick.)
static Key to_key(const SDL_Event& event)
{
    static constexpr auto mapping = std::initializer_list<std::pair<uint32_t, Key>> {
        {SDLK_W, Key::KEY_W},
        {SDLK_ESCAPE, Key::KEY_ESCAPE},
        {SDLK_A ,Key::KEY_A},
        {SDLK_S,Key::KEY_S},
        {SDLK_D,Key::KEY_D},
        {SDLK_P,Key::KEY_P},
    };

    for (auto& [key, value]: mapping)
    {
        if (key == event.key.key) // key.key???? zowie wowie!
        {
            return value;
        }
    }

    return Key::KEY_PLACEHOLDER;
}

static Mouse to_mouse(const SDL_Event& event)
{
    return Mouse::MOUSE_PLACEHOLDER;
}



// this needs access to camera.
void handle_keyboard_input(Key key)
{
    switch (key)
    {
        case Key::KEY_ESCAPE:
        {
            std::print("pressed Escape. See you!\n");
            exit(0);    
            break;
        }

        case Key::KEY_PLACEHOLDER:
        {
            std::print("pressed key that I do not know.\n");
            break;
        }

        // case Key::KEY_W:
        // {
        //     break;    
        // }


        // case Key::KEY_A:
        // {
        //     break;    
        // }


        // case Key::KEY_S:
        // {
        //     break;    
        // }

        // case Key::KEY_D:
        // {
        //     break;    
        // }

        default:
        {
            // std::print("unreachable.\n");
            break;            
        }
    }
}



// Macro to time a block of code or function call, and print function name
#define TIMED_FUNCTION(code_block) \
do { \
    Uint64 start = SDL_GetPerformanceCounter(); \
    code_block; \
    Uint64 end = SDL_GetPerformanceCounter(); \
    double elapsed_in_ms = (end - start) * 1000.0 / SDL_GetPerformanceFrequency(); \
    std::print("Function '{}' took: {} ms\n", __func__, elapsed_in_ms); \
} while(0)

// timing related
size_t current_timing_idx = 0;
auto timings = std::array<double, 1024>{};


AABB_Traces yield_aabb_trace_against_bsp(BSP* bsp, const std::vector<vertex_xnc>& vertices_used_to_create_the_bsp, vec3 player_position, float distance)
{
    AABB_Traces traces{};

    vec3 pos_x_normal = vec3{ 1.0f,  0.0f,  0.0f}; 
    vec3 neg_x_normal = vec3{-1.0f,  0.0f,  0.0f}; 
    vec3 pos_y_normal = vec3{ 0.0f,  1.0f,  0.0f}; 
    vec3 neg_y_normal = vec3{ 0.0f, -1.0f,  0.0f}; 
    vec3 pos_z_normal = vec3{ 0.0f,  0.0f,  1.0f}; 
    vec3 neg_z_normal = vec3{ 0.0f,  0.0f, -1.0f}; 

    size_t closest_pos_x_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, pos_x_normal, distance);
    size_t closest_neg_x_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, neg_x_normal, distance);
    size_t closest_pos_y_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, pos_y_normal, distance);
    size_t closest_neg_y_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, neg_y_normal, distance);
    size_t closest_pos_z_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, pos_z_normal, distance);
    size_t closest_neg_z_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, vertices_used_to_create_the_bsp, player_position, neg_z_normal, distance);

    if (closest_pos_x_face_idx != -1)
    {

        auto& v0 = vertices_used_to_create_the_bsp[closest_pos_x_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_pos_x_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_pos_x_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.pos_x_trace.collided = true;
        traces.pos_x_trace.face_normal = face_normal_at_v0;
    }
    if (closest_neg_x_face_idx != -1)
    {
        auto& v0 = vertices_used_to_create_the_bsp[closest_neg_x_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_neg_x_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_neg_x_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.neg_x_trace.collided = true;
        traces.neg_x_trace.face_normal = face_normal_at_v0;
    }
    if (closest_pos_y_face_idx != -1)
    {
            auto& v0 = vertices_used_to_create_the_bsp[closest_pos_y_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_pos_y_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_pos_y_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.ceiling_trace.collided = true;
        traces.ceiling_trace.face_normal = face_normal_at_v0;
    }
    if (closest_neg_y_face_idx != -1)
    {
        auto& v0 = vertices_used_to_create_the_bsp[closest_neg_y_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_neg_y_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_neg_y_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.ground_trace.collided = true;
        traces.ground_trace.face_normal = face_normal_at_v0;
    }
    if (closest_pos_z_face_idx != -1)
    {
        auto& v0 = vertices_used_to_create_the_bsp[closest_pos_z_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_pos_z_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_pos_z_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.pos_z_trace.collided = true;
        traces.pos_z_trace.face_normal = face_normal_at_v0;
    }
    if (closest_neg_z_face_idx != -1)
    {
        auto& v0 = vertices_used_to_create_the_bsp[closest_neg_z_face_idx].position;
        auto& v1 = vertices_used_to_create_the_bsp[closest_neg_z_face_idx + 1].position;
        auto& v2 = vertices_used_to_create_the_bsp[closest_neg_z_face_idx + 2].position;
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        traces.neg_z_trace.collided = true;
        traces.neg_z_trace.face_normal = face_normal_at_v0;
    }

    return traces;
}


                // collide at the old position.
                // just do "floor" collision.
                // vec3 aabb_negative_y_normal{0.0f,-1.0f,0.0f};
                // size_t closest_face_idx = find_closest_proximity_face_index_with_world_axis(bsp, aabbs_vertices, player_position, aabb_negative_y_normal, 10.f);

                // // set trace information
                // if (traces.ground_trace.collided)
                // {
                //     auto& v0 = aabbs_vertices[closest_face_idx].position;
                //     auto& v1 = aabbs_vertices[closest_face_idx + 1].position;
                //     auto& v2 = aabbs_vertices[closest_face_idx + 2].position;
                //     vec3 e0 =  normalize(v1 - v0);
                //     vec3 e1 =  normalize(v2 - v0);
                //     vec3 face_normal_at_v0 = normalize(cross(e0, e1));

                //     trace.collided = true;
                //     trace.face_normal = face_normal_at_v0; 
                // }
                // else
                // {
                //     trace.collided = false;
                //     trace.face_normal = vec3{0.0f,0.0f,0.0f};
                // }

                // color that one white.
                // if (closest_face_idx != -1 && !(closest_face_idx == previous_closest_face_idx))
                // {  

                //     if (previous_closest_face_idx != -1)
                //     {
                //         // restore the previous colors.
                //         GLsizeiptr previous_closest_face_offset = previous_closest_face_idx * sizeof(vertex_xnc);
                //         std::array<vertex_xnc, 3> previous_closest_face{};
                //         previous_closest_face[0] = aabbs_vertices[previous_closest_face_idx];
                //         previous_closest_face[1] = aabbs_vertices[previous_closest_face_idx + 1];
                //         previous_closest_face[2] = aabbs_vertices[previous_closest_face_idx + 2];

                //         previous_closest_face[0].color = previous_face_color;
                //         previous_closest_face[1].color = previous_face_color;
                //         previous_closest_face[2].color = previous_face_color;

                //         GLsizeiptr pcf_size = 3 * sizeof(vertex_xnc); // replace vertex color for the entire face.
                //         glBufferSubData(GL_ARRAY_BUFFER, previous_closest_face_offset, pcf_size, (void*)previous_closest_face.data());

                //         glBindBuffer(GL_ARRAY_BUFFER, 0);
                //         glBindVertexArray(0);
                //     }

                //     glBindVertexArray(aabb_gl_buffer.VAO); 
                //     glBindBuffer(GL_ARRAY_BUFFER, aabb_gl_buffer.VBO);

                //     GLsizeiptr closest_face_offset = closest_face_idx * sizeof(vertex_xnc);
                //     std::array<vertex_xnc, 3> closest_face{};
                //     closest_face[0] = aabbs_vertices[closest_face_idx];
                //     closest_face[1] = aabbs_vertices[closest_face_idx + 1];
                //     closest_face[2] = aabbs_vertices[closest_face_idx + 2];
                //     vec4 face_color = closest_face[0].color;
                //     // store this color so we can restore it
                //     closest_face[0].color = vec4{1.0f,1.0f,1.0f,1.0f};
                //     closest_face[1].color = vec4{1.0f,1.0f,1.0f,1.0f};
                //     closest_face[2].color = vec4{1.0f,1.0f,1.0f,1.0f};

                //     GLsizeiptr size = 3 * sizeof(vertex_xnc); // replace vertex color for the entire face.
                //     glBufferSubData(GL_ARRAY_BUFFER, closest_face_offset, size, (void*)closest_face.data());
                //     previous_closest_face_idx = closest_face_idx;
                //     previous_face_color = face_color;

                // }



                    // draw the player collision aabb in front of us.
    auto player_aabb_vertices = to_vertex_xnc(player_aabb);
    auto player_aabb_gl_buffer = create_interleaved_xnc_buffer(player_aabb_vertices);





inline size_t find_closest_proximity_face_index_with_world_axis(BSP* bsp, const std::vector<vertex_xnc>& all_faces_buffer, const vec3& position, const vec3& world_axis, float distance_treshold)
{
    // any angle that is between 0 and 80 degrees from up is a floor.
    constexpr auto pm_floor_angle_treshold_deg = 80.f;

    const size_t SENTINEL_FACE_IDX_NOT_FOUND = -1;

    if (bsp == nullptr)
    {
        return SENTINEL_FACE_IDX_NOT_FOUND;
    }

    auto& v0 = all_faces_buffer[bsp->face_idx].position;
    auto& v1 = all_faces_buffer[bsp->face_idx + 1].position;
    auto& v2 = all_faces_buffer[bsp->face_idx + 2].position;

    // how close are we actually? if we are in the plane described by the triangle, or even if we are not.
    float distance = point_to_triangle_distance(position, v0, v1, v2);
    // ok, this is close enough.
    if (distance < distance_treshold)
    {
        vec3 e0 =  normalize(v1 - v0);
        vec3 e1 =  normalize(v2 - v0);
        vec3 face_normal_at_v0 = normalize(cross(e0, e1));

        //  calculate the angle w.r.t the world angle.
        auto dot_product=  dot(face_normal_at_v0, world_axis);
        float floor_angle = acos(dot_product);
        if (fabs(dot_product) < 0.000001f)//@FIXME: formalize this. if the up vector and the wall vector are orthogonal, the dot product is zero and we are just dealing with noise.
        {
            // do nothing.
        }
        else if (floor_angle < pm_floor_angle_treshold_deg && floor_angle > -pm_floor_angle_treshold_deg)
        {
            return bsp->face_idx;
        }
    }

    BSP* first_branch = nullptr;
    BSP* second_branch = nullptr;

    // behind. start exhausting the back planes first.
    if (distance < 0.0f)
    {
        first_branch = bsp->back;
        second_branch = bsp->front;
    }
    else // in front. start exhausting the front planes first.
    {
        first_branch = bsp->front;
        second_branch = bsp->back;
    }

    size_t first_face_index = find_closest_proximity_face_index_with_world_axis(first_branch, all_faces_buffer, position, world_axis, distance_treshold);
    if (first_face_index != SENTINEL_FACE_IDX_NOT_FOUND)
    {
        return first_face_index;
    }

    // Check the second branch. 
    return find_closest_proximity_face_index_with_world_axis(second_branch, all_faces_buffer, position, world_axis, distance_treshold);
}



// the bsp should also have a pointer to the buffer it is based on, I guess?
// FIXME: cleaner would be std::pair<bool found, size_t index>.
inline size_t find_closest_proximity_face_index(BSP* bsp, const std::vector<vertex_xnc>& all_faces_buffer,const vec3& position, float distance_treshold)
{
    const size_t SENTINEL_FACE_IDX_NOT_FOUND = -1;

    if (bsp == nullptr)
    {
        return SENTINEL_FACE_IDX_NOT_FOUND;
    }

    auto& v0 = all_faces_buffer[bsp->face_idx].position;
    auto& v1 = all_faces_buffer[bsp->face_idx + 1].position;
    auto& v2 = all_faces_buffer[bsp->face_idx + 2].position;

    // how close are we actually? if we are in the plane described by the triangle, or even if we are not.
    float distance = point_to_triangle_distance(position, v0, v1, v2);

    // ok, this is it.
    if (distance < distance_treshold)
    {
        return bsp->face_idx;
    }

    BSP* first_branch = nullptr;
    BSP* second_branch = nullptr;

    // behind. start exhausting the back planes first.
    if (distance < 0.0f)
    {
        first_branch = bsp->back;
        second_branch = bsp->front;
    }
    else // in front. start exhausting the front planes first.
    {
        first_branch = bsp->front;
        second_branch = bsp->back;
    }

    size_t first_face_index = find_closest_proximity_face_index(first_branch, all_faces_buffer, position, distance_treshold);
    if (first_face_index != SENTINEL_FACE_IDX_NOT_FOUND)
    {
        return first_face_index;
    }

    // Check the second branch. 
    return find_closest_proximity_face_index(second_branch, all_faces_buffer, position, distance_treshold);
}





    // BSP* first_branch = nullptr;
    // BSP* second_branch = nullptr;

    // if (distance >= 0.0f)
    // {
    //     // The point is on the front side of the plane
    //     first_branch = bsp->front;
    //     second_branch = bsp->back;
    // } else {
    //     // The point is on the back side of the plane
    //     first_branch = bsp->back;
    //     second_branch = bsp->front;
    // }


    // // Recursively search the first branch (closer to the position)
    // size_t closest_index_first = find_closest_proximity_face_index(first_branch, all_faces_buffer, position);

    // // Check the current BSP node's face as a potential candidate
    // float closest_distance = FLT_MAX;
    // size_t closest_face_index = -1; // sentinel value

    // if (closest_index_first != -1)
    // {
    //     // Calculate distance to the closest face in the first branch
    //     vec3 closest_point_on_face = get_closest_point_on_face(all_faces_buffer[closest_index_first], position);
    //     closest_distance = distance_between(position, closest_point_on_face);
    //     closest_face_index = closest_index_first;
    // }

    // // Check the current face's distance
    // vec3 closest_point_on_current_face = get_closest_point_on_face(v0, v1, v2, position);
    // float distance_to_current_face = distance_between(position, closest_point_on_current_face);

    // if (distance_to_current_face < closest_distance) {
    //     closest_face_index = bsp->index_of_face;
    //     closest_distance = distance_to_current_face;
    // }

    // // Recursively search the second branch (further from the position)
    // size_t closest_index_second = find_closest_proximity_face_index(second_branch, all_faces_buffer, position);

    // if (closest_index_second != -1) {
    //     vec3 closest_point_on_face = get_closest_point_on_face(all_faces_buffer[closest_index_second], position);
    //     float distance_to_second_face = distance_between(position, closest_point_on_face);

    //     if (distance_to_second_face < closest_distance) {
    //         closest_face_index = closest_index_second;
    //     }
    // }

    // return closest_face_index;


  // uv grid related.
    auto uv_grid_vertex_shader_str = file_to_string("../data/shaders/grid/grid.vert");
    auto uv_grid_fragment_shader_str = file_to_string("../data/shaders/grid/grid.frag");
    vec2 grid_world_space_dimensions = vec2{1000.f, 1000.f};
    auto uv_grid_vertices = generate_vertex_xu_quad_from_plane(vec3{0.0f, 0.0f, 0.0f}, vec3{0.0f,0.0f,1.0f}, grid_world_space_dimensions.x, grid_world_space_dimensions.y);

    auto uv_grid_shader_program = create_shader_program(
        uv_grid_vertex_shader_str.c_str(),
        uv_grid_fragment_shader_str.c_str()
    );

    if (!uv_grid_shader_program)
    {
        int result = MessageBox(NULL, "failed to compile uv grid shader.", "Error", MB_ICONERROR | MB_RETRYCANCEL);
        if (result == IDCANCEL)
        {
            SDL_Quit();
            return -1;
        }
    }

    set_uniform(uv_grid_shader_program, "line_thickness", 10.0f);
    set_uniform(uv_grid_shader_program, "grid_dimensions", grid_world_space_dimensions);
    auto uv_grid_gl_buffer = create_interleaved_xu_buffer(uv_grid_vertices);


// uv grid
// draw_triangles(uv_grid_gl_buffer.VAO, uv_grid_gl_buffer.VBO, uv_grid_gl_buffer.vertex_count, uv_grid_shader_program,
//     glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
//     get_look_at_view_matrix(camera),
//     glm::mat4(1.0f)
//     );

// player bounding box.
// vec3 target_position = player_position + (20.f * vec3{camera.front.x, camera.front.y, camera.front.z});

// draw_triangles(player_aabb_gl_buffer.VAO, player_aabb_gl_buffer.VBO, player_aabb_gl_buffer.vertex_count, xnc_shader_program,
// glm::perspective(glm::radians(fov), (float)window_width / (float)window_height, near_z, far_z),
// get_look_at_view_matrix(camera),
// glm::translate(glm::mat4(1.0f), glm::vec3(target_position.x, target_position.y, target_position.z))  
// );